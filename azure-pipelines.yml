parameters:
  - name: deploymentName
    type: string
    default: test
    
trigger:
- main

resources:
  - repo: self

pool:
  name: Stewie

jobs:
- job: DeployAll
  displayName: 'Deploy API and WEB For ${{ parameters.deploymentName }}'
  steps:
    - powershell: |
        Write-Host "deploymentName: ${{ parameters.deploymentName }}"
      displayName: 'Diagnostic - Check deploymentName Value'

    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Pipeline.Workspace)/s/'
        artifact: 'manifests'
        publishLocation: 'pipeline'
      displayName: 'Publish Pipeline Artifact'

    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'manifests'
        targetPath: '$(Pipeline.Workspace)/manifests'
      displayName: 'Download Pipeline Artifact'

    - powershell: |
        $templateFiles = Get-ChildItem -Path $(Pipeline.Workspace)/manifests -Filter '*.yaml' -Recurse
        foreach ($file in $templateFiles) {
          (Get-Content $file.FullName) | ForEach-Object {
            $_ -replace '\$\(deploymentName\)', '${{ parameters.deploymentName }}'
          } | Set-Content $file.FullName
        }
      displayName: 'Replace Variables in YAML Templates'

    - task: KubernetesManifest@1
      inputs:
        action: 'deploy'
        connectionType: 'azureResourceManager'
        azureSubscriptionConnection: 'Azure subscription 1(20f9f87d-4d07-496c-b39f-cf473b4b25f3)'
        azureResourceGroup: 'rg-api'
        kubernetesCluster: 'API-Cluster'
        useClusterAdmin: true
        namespace: 'default'
        manifests: |
          $(Pipeline.Workspace)/manifests/job-restore-admin-db.yaml
          $(Pipeline.Workspace)/manifests/job-restore-data-db.yaml
      displayName: 'Deploy restore database job'

    - powershell: |
        # Additional step to wait for the database to be ONLINE
        $DatabaseName = "1BOSS_${{ parameters.deploymentName }}"
        $ServerName = "mssql.minhnhut.online"

        Write-Host "Server Name: $ServerName"
        Write-Host "Database Name: $DatabaseName"

        # Infinite loop
        while ($true) {
            $connectionString = "Server=$ServerName;Database=master;User Id=sa;Password=pa55w0rd!;TrustServerCertificate=True;"
            $databaseStatus = Invoke-Sqlcmd -ConnectionString $connectionString -Query "SELECT state_desc FROM sys.databases WHERE name = '$DatabaseName'"
            $databaseState = $databaseStatus.state_desc

            Write-Host "Database state: $databaseState"

            if ($databaseState -eq "ONLINE") {
                Write-Host "Database is now ONLINE. Proceeding with deployment."
                break
            }
            Start-Sleep -Seconds 10  # Adjust the sleep interval as needed
        }
      displayName: 'Check database status'

    - task: KubernetesManifest@1
      inputs:
        action: 'deploy'
        connectionType: 'azureResourceManager'
        azureSubscriptionConnection: 'Azure subscription 1(20f9f87d-4d07-496c-b39f-cf473b4b25f3)'
        azureResourceGroup: 'rg-api'
        kubernetesCluster: 'API-Cluster'
        useClusterAdmin: true
        namespace: 'default'
        manifests: |
          $(Pipeline.Workspace)/manifests/api-data.yaml
          $(Pipeline.Workspace)/manifests/api-deploy.yaml
          $(Pipeline.Workspace)/manifests/job-ingress-add-host.yaml
      displayName: 'Deploy api'
    
    - task: KubernetesManifest@1
      inputs:
        action: 'deploy'
        connectionType: 'azureResourceManager'
        azureSubscriptionConnection: 'Azure subscription 1(20f9f87d-4d07-496c-b39f-cf473b4b25f3)'
        azureResourceGroup: 'rg-web'
        kubernetesCluster: 'WEB-Cluster'
        namespace: 'default'
        manifests: |
          $(Pipeline.Workspace)/manifests/web-data.yaml
          $(Pipeline.Workspace)/manifests/web-config.yaml
          $(Pipeline.Workspace)/manifests/web-deploy.yaml
          $(Pipeline.Workspace)/manifests/web-job-ingress-add-host.yaml
      displayName: 'Deploy web'
    