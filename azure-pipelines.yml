parameters:
  - name: deploymentName
    type: string
    default: test
    
trigger: none

resources:
  - repo: self

pool:
  name: Stewie

jobs:
- job: DeployAll
  displayName: 'Deploy API and WEB For ${{ parameters.deploymentName }}'
  steps:
    - powershell: |
        Write-Host "deploymentName: ${{ parameters.deploymentName }}"
      displayName: 'Diagnostic - Check deploymentName Value'

    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Pipeline.Workspace)/s/'
        artifact: 'manifests'
        publishLocation: 'pipeline'
      displayName: 'Publish Pipeline Artifact'

    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'manifests'
        targetPath: '$(Pipeline.Workspace)/manifests'
      displayName: 'Download Pipeline Artifact'

    - powershell: |
        $templateFiles = Get-ChildItem -Path $(Pipeline.Workspace)/manifests -Filter '*.yaml' -Recurse
        foreach ($file in $templateFiles) {
          (Get-Content $file.FullName) | ForEach-Object {
            $_ -replace '\$\(deploymentName\)', '${{ parameters.deploymentName }}'
          } | Set-Content $file.FullName
        }
      displayName: 'Replace Variables in YAML Templates'

    - task: KubernetesManifest@1
      inputs:
        action: 'deploy'
        connectionType: 'azureResourceManager'
        azureSubscriptionConnection: 'Azure subscription 1(20f9f87d-4d07-496c-b39f-cf473b4b25f3)'
        azureResourceGroup: 'rg-api'
        kubernetesCluster: 'API-Cluster'
        useClusterAdmin: true
        namespace: 'default'
        manifests: |
          $(Pipeline.Workspace)/manifests/job-restore-admin-db.yaml
          $(Pipeline.Workspace)/manifests/job-restore-data-db.yaml
      displayName: 'Deploy restore database job'

    - powershell: |
        # Additional step to wait for the database to be ONLINE
        $DatabaseName = "1BOSS_${{ parameters.deploymentName }}"
        $ServerName = "mssql.minhnhut.online"

        Write-Host "Server Name: $ServerName"
        Write-Host "Database Name: $DatabaseName"

        # Loop for a maximum of $maxAttempts times
        $maxAttempts = 10
        $attempts = 0
        while ($attempts -lt $maxAttempts) {
            $attempts++

            $connectionString = "Server=$ServerName;Database=master;User Id=sa;Password=pa55w0rd!;TrustServerCertificate=True;"
            $databaseStatus = Invoke-Sqlcmd -ConnectionString $connectionString -Query "SELECT state_desc FROM sys.databases WHERE name = '$DatabaseName'"
            $databaseState = $databaseStatus.state_desc

            Write-Host "Database state: $databaseState"

            if ($databaseState -eq "ONLINE") {
                Write-Host "Database is now ONLINE. Proceeding with deployment."
                break
            }
            Write-Host "Waiting for the database to be ONLINE. Attempt $attempts of $maxAttempts."
            Start-Sleep -Seconds 10
        }
        # Check if the loop exited due to reaching the maximum number of attempts
        if ($attempts -eq $maxAttempts) {
            Write-Host "Database did not come ONLINE after $maxAttempts attempts. Canceling deployment."
            exit 1  # Exit the script with a non-zero status code to mark it as failed
        }
      displayName: 'Check database status'
    
    - powershell: |
        # Set your GoDaddy API key and secret
        $apiKey = "gHzYh74VJWFj_GeraDcnduffMvAVVGiDnZP"
        $apiSecret = "JJA6UeV6NoQAc7SSb8hr3W"

        # Set the domain and record information
        $domain = "minhnhut.online"
        $recordType = "A"
        $recordName = "${{ parameters.deploymentName }}web"
        $recordData = "20.43.178.226"
        $ttl = 600

        # Construct the API endpoint URL
        $apiEndpoint = "https://api.godaddy.com/v1/domains/$domain/records"

        # Construct the headers
        $headers = @{
            'Authorization' = "sso-key $($apiKey):$($apiSecret)"
            'Content-Type'  = 'application/json'
        }

        # Construct the payload for the new DNS record
        $payload = ConvertTo-Json @(@{type=$recordType;name=$recordName;data=$recordData;ttl=$ttl})

        # Make the API request to create the DNS record
        $response = Invoke-RestMethod -Uri $apiEndpoint -Method Post -Headers $headers -Body $payload

        # Display the response
        $response
      displayName: 'Add DNS Record For Web'

    - powershell: |
        # Set your GoDaddy API key and secret
        $apiKey = "gHzYh74VJWFj_GeraDcnduffMvAVVGiDnZP"
        $apiSecret = "JJA6UeV6NoQAc7SSb8hr3W"

        # Set the domain and record information
        $domain = "minhnhut.online"
        $recordType = "A"
        $recordName = "${{ parameters.deploymentName }}api"
        $recordData = "20.92.68.166"
        $ttl = 600

        # Construct the API endpoint URL
        $apiEndpoint = "https://api.godaddy.com/v1/domains/$domain/records"

        # Construct the headers
        $headers = @{
            'Authorization' = "sso-key $($apiKey):$($apiSecret)"
            'Content-Type'  = 'application/json'
        }

        # Construct the payload for the new DNS record
        $payload = ConvertTo-Json @(@{type=$recordType;name=$recordName;data=$recordData;ttl=$ttl})

        # Make the API request to create the DNS record
        $response = Invoke-RestMethod -Uri $apiEndpoint -Method Post -Headers $headers -Body $payload

        # Display the response
        $response
      displayName: 'Add DNS Record For API'

    - task: KubernetesManifest@1
      inputs:
        action: 'deploy'
        connectionType: 'azureResourceManager'
        azureSubscriptionConnection: 'Azure subscription 1(20f9f87d-4d07-496c-b39f-cf473b4b25f3)'
        azureResourceGroup: 'rg-api'
        kubernetesCluster: 'API-Cluster'
        useClusterAdmin: true
        namespace: 'default'
        manifests: |
          $(Pipeline.Workspace)/manifests/api-data.yaml
          $(Pipeline.Workspace)/manifests/api-deploy.yaml
          $(Pipeline.Workspace)/manifests/api-job-ingress-add-host.yaml
      displayName: 'Deploy api'
    
    - task: KubernetesManifest@1
      inputs:
        action: 'deploy'
        connectionType: 'azureResourceManager'
        azureSubscriptionConnection: 'Azure subscription 1(20f9f87d-4d07-496c-b39f-cf473b4b25f3)'
        azureResourceGroup: 'rg-web'
        kubernetesCluster: 'WEB-Cluster'
        namespace: 'default'
        manifests: |
          $(Pipeline.Workspace)/manifests/web-data.yaml
          $(Pipeline.Workspace)/manifests/web-config.yaml
          $(Pipeline.Workspace)/manifests/web-deploy.yaml
          $(Pipeline.Workspace)/manifests/web-cronjob-delete-log.yaml
          $(Pipeline.Workspace)/manifests/web-job-ingress-add-host.yaml
      displayName: 'Deploy web'
    